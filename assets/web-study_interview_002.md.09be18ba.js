import{_ as e,c as o,o as a,O as l}from"./chunks/framework.ccf0166b.js";const h=JSON.parse('{"title":"flex布局","description":"","frontmatter":{},"headers":[],"relativePath":"web-study/interview/002.md","lastUpdated":null}'),s={name:"web-study/interview/002.md"},t=l(`<h1 id="flex布局" tabindex="-1">flex布局 <a class="header-anchor" href="#flex布局" aria-label="Permalink to &quot;flex布局&quot;">​</a></h1><h2 id="什么是flex布局" tabindex="-1">什么是flex布局 <a class="header-anchor" href="#什么是flex布局" aria-label="Permalink to &quot;什么是flex布局&quot;">​</a></h2><blockquote><p>Flexible Box 简称 <code>flex</code></p><p>弹性布局， 可以简便、完整、响应式地实现各种页面布局</p></blockquote><blockquote><p>采用Flex布局的元素，称为 <code>flex</code> 容器 [<code>container</code>]</p><p>它的所有子元素自动成为容器成员，称为 <code>flex</code> 项目 [<code>item</code>]</p></blockquote><p><img src="https://static.developers.pub/be830d6d00ea4c3f9434a5e61fbb2286.png" alt="be830d6d00ea4c3f9434a5e61fbb2286"></p><blockquote><p>容器中存在两条轴 <code>主轴</code> 和 <code>交叉轴</code> 呈90度</p><p>每条轴都有 <code>起点</code> 和 <code>终点</code></p><p>项目默认是沿着主轴排列，可以用 <code>flex-direction</code> 属性改变</p></blockquote><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><p>flex常见的属性可分为两种：</p><ul><li>容器属性</li><li>容器成员属性</li></ul><h3 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">​</a></h3><h4 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-label="Permalink to &quot;flex-direction&quot;">​</a></h4><blockquote><p>决定<em>主轴</em>的方向,就是项目的排列方向</p></blockquote><blockquote><p>flex-direction</p><blockquote><p>row (默认值): 主轴为水平方向，<code>起点在左侧</code></p><p>row-reverse: 主轴为水平方向，<code>起点在右侧</code></p><p>column： 主轴为垂直方向，<code>起点在上沿</code></p><p>column-reverse: 主轴为垂直方向，<code>起点在下沿</code></p></blockquote></blockquote><h4 id="flex-wrap" tabindex="-1">flex-wrap <a class="header-anchor" href="#flex-wrap" aria-label="Permalink to &quot;flex-wrap&quot;">​</a></h4><blockquote><p>决定容器中的项目是否换行</p></blockquote><blockquote><p>flex-wrap</p><blockquote><p>nowrap (默认值)： 不换行</p><p>wrap： 换行</p><p>wrap-reverse： 换行，但是方向与wrap方向相反</p></blockquote></blockquote><h4 id="flex-flow" tabindex="-1">flex-flow <a class="header-anchor" href="#flex-flow" aria-label="Permalink to &quot;flex-flow&quot;">​</a></h4><blockquote><p>这是<code>flex-direction</code> 与 <code>flex-wrap</code>的简写</p></blockquote><blockquote><p>flex-flow: [flex-direction] || [flex-wrap]</p></blockquote><h4 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-label="Permalink to &quot;justify-content&quot;">​</a></h4><blockquote><p>决定了项目在主轴上的对齐方式</p></blockquote><blockquote><p>justify-content</p><blockquote><p>flex-start(默认值): 左对齐</p><p>flex-end: 右对齐</p><p>center: 居中</p><p>space-between: 两端对齐，项目之间的间隔都相等</p><p>space-around: 主轴与边框的距离是项目之间距离的一半</p><p>space-evenly: 间隔都一样</p></blockquote></blockquote><h4 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h4><blockquote><p>决定了项目在交叉轴上的对齐方式</p></blockquote><blockquote><p>align-items</p><blockquote><p>flex-start: 交叉轴的起点对齐</p><p>flex-end: 交叉轴的终点对齐</p><p>center: 交叉轴的终点对齐</p><p>baseline: 项目第一行文字的基线对齐</p><p>stretch(默认值): 如果项目未设置宽高或者设为auto，将沾满整个容器的高度</p></blockquote></blockquote><h4 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h4><blockquote><p>决定了多条轴线的对齐方式，如果项目只有一条轴线，那这个属性不起作用</p></blockquote><blockquote><p>align-content</p><blockquote><p>flex-start: 与交叉轴的起点对齐</p><p>flex-end: 与交叉轴的终点对齐</p><p>center: 与交叉轴的中点对齐</p><p>space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布</p><p>space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</p><p>space-evenly: 间隔都一样</p><p>stretch(默认值): 轴线占满整个交叉轴</p></blockquote></blockquote><h3 id="容器成员属性" tabindex="-1">容器成员属性 <a class="header-anchor" href="#容器成员属性" aria-label="Permalink to &quot;容器成员属性&quot;">​</a></h3><h4 id="order" tabindex="-1">order <a class="header-anchor" href="#order" aria-label="Permalink to &quot;order&quot;">​</a></h4><blockquote><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">order</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &lt;integer&gt;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-label="Permalink to &quot;flex-grow&quot;">​</a></h4><blockquote><p>定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展）</p></blockquote><blockquote><p>默认为<code>0</code>，即如果存在剩余空间，也不放大</p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）</p><p>如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</p><p>弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论<code>flex-grow</code>是什么值都不会生效</p></blockquote><h4 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h4><blockquote><p>定义了项目的缩小比例（容器宽度&lt;元素总宽度时如何收缩）</p></blockquote><blockquote><p>默认为1，即如果空间不足，该项目将缩小</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">flex-shrink</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &lt;number&gt;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* default 1 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小</p></blockquote><blockquote><p>如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小</p><p>在容器宽度有剩余时，<code>flex-shrink</code>也是不会生效的</p></blockquote><h4 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h4><blockquote><p>设置的是元素在主轴上的初始尺寸</p><p><code>初始尺寸</code>是元素在 <code>flex-grow</code> 和 <code>flex-shrink</code> 生效前的尺寸</p></blockquote><blockquote><p>浏览器根据这个属性，计算主轴是否有多余空间，默认值为<code>auto</code>，即项目的本来大小，如设置了<code>width</code>则元素尺寸由<code>width/height</code>决定（主轴方向），没有设置则由内容决定</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">flex-basis</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &lt;length&gt; | auto</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* default auto */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>当设置为0的是，会根据内容撑开</p></blockquote><blockquote><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</p></blockquote><h4 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h4><blockquote><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，也是比较难懂的一个复合属性</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none | [ &lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-grow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">&gt; &lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-shrink</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">&gt;? || &lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flex-basis</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">&gt; ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>flex: 1 = flex: 1 1 0%</p><p>flex: 2 = flex: 2 1 0%</p><p>flex: auto = flex: 1 1 auto</p><p>flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩</p></blockquote><blockquote><p><code>flex:1</code> 和 <code>flex:auto</code> 的区别，可以归结于<code>flex-basis:0</code>和<code>flex-basis:auto</code>的区别</p></blockquote><blockquote><p>当设置为0时（绝对弹性元素），此时相当于告诉<code>flex-grow</code>和<code>flex-shrink</code>在伸缩的时候不需要考虑我的尺寸</p><p>当设置为<code>auto</code>时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑</p></blockquote><p>注· 优先使用这个值，不要单独拆开写，因为浏览器会推算这些值</p><h4 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-label="Permalink to &quot;align-self&quot;">​</a></h4><blockquote><p>允许单个项目有与其他项目不一样的对齐方式 可以覆盖<code>align-items</code>属性</p></blockquote><blockquote><p>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">align-self</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto | flex-start | flex-end | center | baseline | stretch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>元素水平垂直居中</p><p>三栏两栏布局</p><p>移动端、小程序都建议使用flex弹性布局</p>`,62),c=[t];function n(p,r,i,d,u,b){return a(),o("div",null,c)}const x=e(s,[["render",n]]);export{h as __pageData,x as default};
